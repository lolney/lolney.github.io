{
    "data" :  {
    "title": "Notes on some of Facebook's dev tools work",
    "content": "

<p>The scale of big tech companies means it makes sense to put a lot of work into developer tools, even if they provide only marginal improvements to any individual workflow. Some of the projects described on Facebook&rsquo;s engineering blog in particular are really cool &ndash; and sometimes their utility also matches that coolness. I&rsquo;ll summarize a couple of them here:</p>

<h2 id="anomaly-detection-https-engineering-fb-com-developer-tools-ccsm"><a href="https://engineering.fb.com/developer-tools/ccsm/">Anomaly detection</a></h2>

<p>This tool finds statistically significant features from crash reports to aid in debugging. Lots of crash reports, with lots of (mostly irrelevant) information in each one, are difficult to interpret. There&rsquo;s a huge upside if you can group reports into similar types of crashes, and also determine the features from similar crash reports that led to the crash. This article describes a way to automate the latter step.</p>

<p>Crash reports can be distilled to group of key-value pairs like <code>{ country: US, version: 4, ...}</code>. The article calls thees <code>contrast sets</code>. The goal is to find contrast sets that are particularly relevant for some group.</p>

<p>For discrete data (like <code>country: US</code> ), we can work with these null hypotheses for statistical tests to determine relevance:</p>

<ul>
<li>There exists some pair of groups G_i, G_j, where the likelihood of seeing the contrast set is significantly different between them</li>
<li>The difference is at least d for some pair of groups G_i, G_j</li>
</ul>

<p>We can also use continuous data, like TD-IDF scores for a given page transition (treated a a bigram, eg, feed → photos). These show how common this interaction was in a crash report, relative to all the others.</p>

<p>The statistical test here is similar idea: the null hypothesis is that the average of the variable is the same across groups</p>

<h2 id="autofix-suggestions-https-engineering-fb-com-developer-tools-getafix-how-facebook-tools-learn-to-fix-bugs-automatically"><a href="https://engineering.fb.com/developer-tools/getafix-how-facebook-tools-learn-to-fix-bugs-automatically/">Autofix suggestions</a></h2>

<p>Static analysis can help you identify problematic code, but this tool, Getafix, goes a step above that – by suggesting a patch to fix it.</p>

<p>This is a tool that&rsquo;s similar to publicly available services like <a href="https://lgtm.com/">https://lgtm.com/</a>, but it&rsquo;s cool to see the methodology explained here.</p>

<p>Getafix learns from past bug fixes to suggest new bug fixes. It&rsquo;s a linter that also suggests intelligent changes, based on code that other developers have used to fix similar issues.</p>

<p>It works by training on diffs of the AST, doing <a href="[https://en.wikipedia.org/wiki/Anti-unification_(computer_science)](https://en.wikipedia.org/wiki/Anti-unification_(computer_science))">anti-unification</a> to group examples that differ only by variables, then building a model that takes the surrounding code into account.</p>

<p>In the pattern mining stage, it unifies edits with some element in common that can be swapped out. E.g., <code>if(dog == null)</code> and <code>if(cat == null)</code> get represented by the common <code>if(n_0 == null)</code></p>

<p>It also supports multiple layers of context. <code>if(dog == null) return; dog.drink();</code> and <code>if(list == null) return; do{ list.pop }</code> have the first line in common, but not the second line.</p>

<p>The context restricts the number of places where the fix can be applied, even if some of the context is unmodified. It can also decide between competing fixes</p>

<ul>
<li><code>h0.h1()</code> → <code>h0!=null &amp;&amp; h0.h1()</code></li>
<li><code>h0.h1()</code> → <code>if (h0 == null) return;</code> h0.h1()`</li>
</ul>

<p>The second is specific to function calls and therefore more likely to be applied, if it matches.</p>

<h2 id="automated-performance-regression-testing-https-engineering-fb-com-web-browserlab-automated-regression-detection-for-the-web"><a href="https://engineering.fb.com/web/browserlab-automated-regression-detection-for-the-web/">Automated performance regression testing</a></h2>

<p>Facebook&rsquo;s CI pipeline analyzes every code change for performance regressions. But when doing end-to-end performance regression testing, especially on a site as complex as Facebook, there&rsquo;s a lot of variation in performance between runs that make these sorts of tests difficult to interpret. Here are some are the areas where the engineers had to work minimize variance between tests, and their solutions:</p>

<ul>
<li>Data loaded. There&rsquo;s a proxy to ensure that data servers serve a cached version for both the control and treatment versions of the experiment.</li>
<li>Code nondeterminism - eg, slow logging scripts that are run 1-in-10 times. The fix replaces random generators on the client side with seeded versions. This is necessary on the server side as well, since presumably A-B testing and the like means that the components returned are not the same every time. Here, each call site gets with a uniquely seeded RNG, since multithreading means that the same execution order is not guaranteed every time.</li>
<li>Environment differences - e.g. browser cookies and cache. Here, it&rsquo;s just necessary to have a clean browser setup for each run of the tests.</li>
</ul>
"
} 
}

