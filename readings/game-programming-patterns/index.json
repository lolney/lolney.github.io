{
    "data" :  {
    "title": "Game Programming Patterns: Revisiting Design Patterns",
    "content": "

<p>This book has a game programming perspective, but it’s applicable to software of all sorts. It&rsquo;s kind of a modern take on the original GoF Design Patterns, showing the evolving meaning of the some and extending others.</p>

<p>Redux author Dan Abrahamov has recommended it, saying he &ldquo;wouldn&rsquo;t claim it&rsquo;s the best book ever&rdquo; but also that it&rsquo;s &ldquo;practical and fun&rdquo; and &ldquo;required reading for UI engineers.&rdquo; You certainly get explanations of some of the trends in programming models that motivated the creators of React, like favoring functional reactive components over imperative events, components over class hierachies, etc.</p>

<h3 id="the-patterns">The patterns</h3>

<ol>
<li><a href="#Command">Command</a></li>
<li><a href="#Flyweight">Flyweight</a></li>
<li><a href="#third-example">Third Example</a></li>
</ol>

<h4 id="command">Command</h4>

<ul>
<li>Def: an object-oriented replacement for callbacks</li>
<li>That is, a method call wrapped in an object</li>
<li>Support stuff like:</li>
<li>Permissions</li>
<li>Logging metadata</li>
</ul>

<p>Actor controls example:
BUTTON_A -&gt; jumpCommand
BUTTON_B -&gt; shootCommand</p>

<pre><code>ShootCommand extends Command {
    execute(actor) {
        actor.jump()
    }
}
</code></pre>

<ul>
<li>Allows AI and player to be treated the same: just emit commands</li>
<li>Allows easily switching the actor that a player controls</li>
</ul>

<p>Undoing</p>

<ul>
<li>Tie an actor and previous state to each command</li>
<li>Keep a command history</li>
<li>Undoing a command means:</li>
<li>Pop the command off the command history</li>
<li>Set the state of the actor to the previous state</li>
</ul>

<p>Ties in with:</p>

<ul>
<li>Subclass sandbox: execute method may be better expressed as a composition of other methods</li>
<li>Chain of responsibility: actor may delegate to another object (e.g., shoot delegates to actor.gun)</li>
<li>Flyweight: if we have multiple controls creating a JumpCommand that’s largely the same, we might implement it as a Flyweight</li>
</ul>

<h4 id="flyweight">Flyweight</h4>

<ul>
<li>If there are elements duplicated among objects, limit the per-instance data to whatever’s unique and point each object to a shared copy of the rest.</li>
</ul>

<pre><code>Tree1 Tree2 Tree3
|————|———|
|
TreeModel
</code></pre>

<ul>
<li>Another example: a tile array points to terrain instances, which store info about each terrain type:</li>
</ul>

<pre><code>  [tile1, tile2, tile3, tile4]
  |———|    |    |—————————|
  |        |    |
  Grass River Hill
</code></pre>

<ul>
<li>Retains the advantages of an API that works with real objects</li>
</ul>

<h4 id="observer">Observer</h4>

<ul>
<li>This is an extremely ubiquitous pattern, baked into, eg, Javascript and C# with the &ldquo;Event&rdquo; class.</li>
<li>Decouples the logic of responding to events from creating the events</li>
</ul>

<pre><code>Subject (ie, event emitter)
-- Observer[] (ie, event handlers)
---- onNotify(event)
-- notify(event) (ie, emit)
</code></pre>

<ul>
<li>Potential concerns:

<ul>
<li>Speed: it&rsquo;s fast, with little overhead (just dynamic dispatch)</li>
<li>Blocking: if event handlers are synchronous, they should do not too much work or risk blocking the notifying thread</li>
<li>Observer list is dynamically allocated, but observers can also be treated as a linked list (with pointers part of the observer state)</li>
<li>Memory management: observers must take care to deregister themselves, including in GCed languages (where they otherwise won&rsquo;t be GCed)</li>
<li>Reasoning about behavior: hard to do statically, since the list of observers is only know at runtime (and these can come from anywhere in the code base)</li>
<li>Observers and subjects are loosely coupled, and reducing dependency is generally good. But if there is inherent dependency, best make it explicit.</li>
</ul></li>
</ul>

<p>Once common in UI programming, declarative reactive programming has replaced many use cases. A prescient quote:</p>

<blockquote>
<p>Like other declarative systems, data binding is probably a bit too slow and complex to fit inside the core of a game engine. But I would be surprised if I didn’t see it start making inroads into less critical areas of the game like UI.</p>
</blockquote>

<h4 id="prototype">Prototype</h4>

<ul>
<li>Example: a spawner creates monsters. The spawner holds a monster &ldquo;prototype,&rdquo; which can be cloned to create new monster instances.</li>
</ul>

<pre><code>Spawner {
    prototype: Monster;

    spawn() -&gt; Monster {
        return prototype.clone();
    }
}
</code></pre>

<ul>
<li><p>Concerns:</p>

<ul>
<li>We usually wouldn&rsquo;t maintain a massive class hierarchy for monsters, but make them instances of a monster type class.</li>
</ul></li>

<li><p>Alternatives:</p>

<ul>
<li>Type parameters:</li>
</ul></li>
</ul>

<pre><code>Spawner&lt;T&gt; {

    spawn() -&gt; T {
        return new T();
    }
}
</code></pre>

<ul>
<li>Another application: reducing redundancy in data modeling:</li>
</ul>

<pre><code>goblin = {
    height: 10,
    width: 10
}

greenGoblin = {
    prototype: goblin,
    color: &quot;green&quot;
}
</code></pre>

<h6 id="prototypes-in-javascript-and-other-languages">Prototypes in Javascript and other languages</h6>

<ul>
<li>In a pure prototype-based language &ndash; Self is the first example &ndash; objects are created by cloning other objects, at which point other fields can be added.</li>
<li>ES5 classes more closely resemble traditional classes, just defined a bit strangely (something that ES6 basically admits). A constructor is a function, not an object that can be cloned.</li>
</ul>

<h4 id="singleton">Singleton</h4>

<ul>
<li>Alternatives:

<ul>
<li>For preventing multiple instances:</li>
<li>Can make assert that a class is only created once, but not give global access</li>
<li>For &ldquo;manager&rdquo; or utility classes:</li>
<li>Use utility functions instead</li>
<li>For convenient access:</li>
<li>Attach to state that&rsquo;s already local (eg, attach logger to the game instance). Would, eg, prevent clashes between logs if multiple game instances are required in the future.</li>
</ul></li>
</ul>

<h4 id="state">State</h4>

<ul>
<li>Using dynamic dispatch:

<ul>
<li>Assume we have a set of actions, like <code>update</code> and <code>handleInput</code>, that depend on state. We implement that as classes that implement those actions as virtual methods:</li>
</ul></li>
</ul>

<pre><code>class DuckingState : public HeroineState {
    virtual void handleInput(Heroine&amp; heroine, Input input) {
        ...
    }

    virtual void update(Heroine&amp; heroine) {
        ...
    }
}
</code></pre>

<ul>
<li>State transitions can be delegated to the individual states. Here, handleInput returns the new state:</li>
</ul>

<pre><code>class GameState {
    handleInput(input: Input)
    {
        this.state = this.state.handleInput(input);
        state.enter()
    }
}
</code></pre>

<h6 id="concerns">Concerns:</h6>

<ul>
<li>A single state is often not enough. Eg, a character can be both running and jumping.

<ul>
<li>Mulitple state machines can solve this problem, but this doesn&rsquo;t model interaction well.</li>
<li>Hierachical state machines: can delegate common behavior to parent states. Has the normal problems of inheritance, though, like increased complexity of hidden behavior.</li>
</ul></li>
</ul>
"
} 
}

