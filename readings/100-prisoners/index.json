{
    "data" :  {
    "title": "100 Prisoners",
    "content": "<p>The 100 prisoners problem is a probability thought exercise with an unintuitive solution, kind of like the Monty-Hall problem. The setup is this: there are 100 numbers in drawers, each corresponding to one of 100 prisoners. Each prisoner is allowed to pick 50 drawers, but the drawers are reset after each prisoner makes their choice (and there&rsquo;s no communication between prisoners). The goal is for each prisoner to find their number &ndash; if that happens, they escape their sentence.</p>

<p>The naive solution is to pick the 50 drawers at random, giving each prisoner a 50% chance of success (and a vanishingly small chance &ndash; .50^100 &ndash; for all 100 prisoners to pick the correct number). But there&rsquo;s a strategy that drastically improves the odds of success, bringing it to ~30%.</p>

<p>This strategy does not appear much different from the naive one, but it relies on the hidden correlation between success and failure in the permutation cycles to shape the search space. Namely, the prisoners want to search a set that&rsquo;s as different as possible from everyone else&rsquo;s &ndash; since they know the world where they succeed is one in which they all pick different boxes.</p>

<p>The the <a href="https://en.wikipedia.org/wiki/100_prisoners_problem#Monty_Hall_problem">Monty Hall-inspired analogy on the Wikipedia page</a> gives a good explanation of this. Essentially, the contestants choose doors (over two rounds) in a way that they&rsquo;re never picking the same door in the same round.</p>

<p>Consider how the prisoners could design their choices similarly. If, in the case where each prisoner is only allowed to search a single box, all prisoners just choose box 1, there is no possibility of success: Only one prisoner will find the correct number. Choosing a box at random has some probability of success, if extremely low: 100^-100. If instead each prisoner i chooses the ith box, the chances are improved: it&rsquo;s now 1/(100!), since each correctly chosen box constrains the options for future boxes. If just you expand that search to the next 50 boxes, you still don&rsquo;t get the optimal solution - starting with a <sup>1</sup>&frasl;<sub>2</sub> chance of success for the first prisoner, the next 50 prisoners slowly widdle that down to 1 (the resulting probability is 50^50/(100!/50!)).</p>

<p>It follows along these lines that permutation cycles, being disjoint, are better for structuring the search. But I&rsquo;m not sure how to make this intuition concrete, if that&rsquo;s even possible.</p>
"
} 
}

