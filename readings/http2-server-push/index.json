{
    "data" :  {
    "title": "HTTP/2 Server Push vs Websockets vs Server-Sent Events",
    "content": "<p>One of the key features of HTTP/2 is server push, a way of sending resources over HTTP before the browser requests them. It&rsquo;s related to the older API of SSE (server-sent events), which can be done, with more overhead, over HTTP/1.1, but server push is done in a more stream-oriented way. This post will focus on the differences between the two, as well as what prevents it from being used like websockets.</p>

<p>Server push is typically presented as an alternative to inlining page resources like CSS [1], limited in scope to when a web page is first loaded.</p>

<p>This is because the HTTP/2 push protocol is built to be browser-controlled. Specifically, an HTTP/2 PUSH-enabled server will send a response that contains a PUSH_PROMISE frame for every resource that it expects will be requested, containing the headers that would be included with that request. These are collected by the browser in a store for PUSH_PROMISE frames. The browser can then check its PUSH_PROMISE store before making any requests; if it finds the headers for that request there, it can simply wait for the resource to arrive. [2]</p>

<pre><code>Client ----&gt;
GET example.com/index.html
</code></pre>

<pre><code>&lt;---- Server
PUSH_PROMISE:
GET example.com/index.html
</code></pre>

<pre><code>&lt;---- Server
200 OK
/Headers/
`link: script.js`
/Body/
&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;head&gt;&lt;title&gt;&lt;/title&gt;&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<pre><code>Client:
[find script.js in store; don't make request]
</code></pre>

<pre><code>&lt;---- Server
`200 OK`
/Body/
`console.log('hello world);`
</code></pre>

<p>But it&rsquo;s not immediately clear what happens when a server pushes resources that haven&rsquo;t been requested. Is it possible to use a persistent HTTP connection to send resources as you would through a websocket channel? The benefits of this approach might include a security advantage [3], and it might help simplify web app architectures: for instance, we you need both the structure of a REST API and the push capability of websockets. This feature would have to be implemented by browsers, but I don&rsquo;t see any reason that can&rsquo;t, in principle, be done.</p>

<p>Other Notes:</p>

<p>-</p>

<ul>
<li>Server-sent events have a more websockets-like API, mimicking the familiar Javascript event API.</li>
<li>Another push option is the <em>Push API</em>, distinct from HTTP push. It&rsquo;s a distinct protocol: <a href="https://w3c.github.io/push-api/">https://w3c.github.io/push-api/</a></li>
</ul>

<p>[1] <a href="https://blog.golang.org/h2push">https://blog.golang.org/h2push</a>
[2] <a href="https://en.wikipedia.org/wiki/HTTP/2_Server_Push#How_HTTP/2_PUSH_works_at_a_protocol_level">https://en.wikipedia.org/wiki/HTTP/2_Server_Push#How_HTTP/2_PUSH_works_at_a_protocol_level</a>
[3] <a href="https://stackoverflow.com/questions/28582935/does-http-2-make-websockets-obsolete">https://stackoverflow.com/questions/28582935/does-http-2-make-websockets-obsolete</a></p>
"
} 
}

