<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Luke Olney</title>
    <link>https://lolney.github.io/</link>
    <description>Recent content on Luke Olney</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Mar 2018 02:01:38 -0800</lastBuildDate>
    
        <atom:link href="https://lolney.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Imputed Rent</title>
      <link>https://lolney.github.io/posts/imputed-rent/</link>
      <pubDate>Sun, 18 Mar 2018 02:01:38 -0800</pubDate>
      
      <guid>https://lolney.github.io/posts/imputed-rent/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://mobile.nytimes.com/blogs/economix/2013/09/03/taxing-homeowners-as-if-they-were-landlords/?referer=&#34;&gt;https://mobile.nytimes.com/blogs/economix/2013/09/03/taxing-homeowners-as-if-they-were-landlords/?referer=&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Imputed rent captures the idea that homeowners, as landlords, implicitly collect rent from themselves, as renters. Like ordinary rental income, then, it ought to be included in an account of the homeowners&amp;rsquo; income, even if it&amp;rsquo;s balanced out by an equally-sized expense. That would imply it&amp;rsquo;s only fair that income tax applies to this income, as well.&lt;/p&gt;

&lt;p&gt;Although the concept is widely accepted, if imperfectly accounted for, in national income analysis - it&amp;rsquo;s used by the Deparment of Commerce in the calculation of GDP&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:0&#34;&gt;&lt;a href=&#34;#fn:0&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; - scanning the comments of the linked NYTimes article reveals that the concept is deeply offensve to the public. Though many commentors make tortured attempts to argue against it there,&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; some of them make a good point: imputed income does not just apply to homeownership, but to any kind of service you offered to yourself or to any use of your own property. If you put a tax on imputed rent, that opens up the possibility of taxes on the food you&amp;rsquo;ve grown in your garden, on the shirts in your wardrobe, or on the labor of washing your own dishes. I don&amp;rsquo;t think, though, that this threatens the concept of imputed income in the first place - it speaks more to the difficulty in accounting for all the various types of it and the challenge to our intution that it presents. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; Unpaid labor is not less valuable to the economy than paid labor, and neither is there more value made if you live in your neighbors&amp;rsquo; house and they live in yours, each paying rent to the other.&lt;/p&gt;

&lt;p&gt;It is still difficult to shake the feeling that housing is especially singled out in these analyses. Googling &amp;ldquo;imputed [rent/income] of non-housing property,&amp;rdquo; &amp;ldquo;imputed income from car ownership,&amp;rdquo; etc., turns up little discussion of the concept applied to non-housing property, the only results I found being &lt;a href=&#34;http://stuartbuck.blogspot.com/2005/02/imputed-rental-income.html&#34;&gt;a blogger&amp;rsquo;s take&lt;/a&gt; in a similar vein as the NYTimes comments. However, a discussion of &amp;ldquo;rental income of persons&amp;rdquo; on the BEA website does mention &amp;ldquo;patents, copyrights, and rights to natural resources&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; in addition to housing. I did also manage to find a paper (1943)&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;5&lt;/a&gt;&lt;/sup&gt; that considers, after introducing the subject with housing, &amp;ldquo;the rental value of other owned durable goods such as automobiles, aeroplanes, refrigerators and the like.&amp;rdquo; This same paper calculates the total imputed income from a variety of consumer goods - including automobiles, furniture, and radios - at 365 billion, compared to 1.8 trillion from imputed housing rent. Since housing prices have only risen (faster than inflation) since then,&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5&#34;&gt;&lt;a href=&#34;#fn:5&#34;&gt;6&lt;/a&gt;&lt;/sup&gt; it seems the discussion is housing-focused for good reason - the housing stock represents most of the value of durable goods in the country.&lt;/p&gt;

&lt;p&gt;In any case, any attempt to implement a tax on imputed rent in the United States faces a history of stiff resistance, by both the public and the courts, even to milder forms of taxation. Even estate taxes, applying to intergenerational transfers of wealth, are a contentious political issue, and they tax something that&amp;rsquo;s more clearly income than imaginary tranfers of money to oneself. The Supreme Court has written&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:6&#34;&gt;&lt;a href=&#34;#fn:6&#34;&gt;7&lt;/a&gt;&lt;/sup&gt; that imputed rent does not consitute income, which does not allow it to be taxed under the Consitution - non-apportioned direct taxes (ones that aren&amp;rsquo;t proportional to population) are prohibited under Article I, Section 2, Clause 3, only allowed to apply to income by the 16th amendment. In fact, when the income tax was only 7 yers old, the Supreme Court ruled in Eisner v. Macomber &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:7&#34;&gt;&lt;a href=&#34;#fn:7&#34;&gt;8&lt;/a&gt;&lt;/sup&gt; that stock dividends are not a form of taxable income, though that decision was eroded by later rulings.&lt;/p&gt;

&lt;p&gt;More importantly, an imputed rent tax would undermine the well-enshrined incentives for home ownership in the US - see Devon Zeugler&amp;rsquo;s post on the subject.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9&#34;&gt;&lt;a href=&#34;#fn:9&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; That such a tax is unthinkable here, but, as the NYTimes article mentions, is implemented is several European countries, reflects the possibility for vastly different models of home ownership than our own.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:0&#34;&gt;&lt;a href=&#34;https://www.bea.gov/faq/?faq_id=488&#34;&gt;https://www.bea.gov/faq/?faq_id=488&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:0&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://mobile.nytimes.com/comments/blogs/economix/2013/09/03/taxing-homeowners-as-if-they-were-landlords/&#34;&gt;Comments&lt;/a&gt;. One of the more off-base ones attempts to argue that the concept is bunk because the bank is the real owner of the house in some cases, but there are also a bunch of weird attmpts at argumetum ad absurdum by coming up with exapmles of imputed income (like &amp;ldquo;[going] home and saw[ing] a slice of ham&amp;rdquo;).
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;http://www.roiw.org/1979/349.pdf&#34;&gt;Kendrick, John W. &amp;ldquo;Expanding imputed values in the national income and product accounts.&amp;rdquo; Review of Income and Wealth 25.4 (1979): 349-363.&lt;/a&gt;. 1979: &amp;ldquo;The official national income and product accounts of most countries contain but a limited range of imputed values for non-market economic activities.&amp;rdquo;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://www.bea.gov/faq/index.cfm?faq_id=64&#34;&gt;https://www.bea.gov/faq/index.cfm?faq_id=64&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;&lt;a href=&#34;www.jstor.org/stable/2144946&#34;&gt;Marsh, Donald B. “The Taxation of Imputed Income.” Political Science Quarterly, vol. 58, no. 4, 1943, pp. 514–536. JSTOR&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5&#34;&gt;&lt;a href=&#34;https://inequality.stanford.edu/sites/default/files/media/_media/pdf/Reference%20Media/Glaeser_Gyourko_Saks_2005.pdf&#34;&gt;Glaeser, Edward, L., Joseph Gyourko, and Raven E. Saks. 2005. &amp;ldquo;Why Have Housing Prices Gone Up?&amp;rdquo; American Economic Review, 95(2): 329-333.&lt;/a&gt; :  &amp;ldquo;Since 1970, U.S. Census data show that the standard deviation of prices across metropolitan areas increased by 247 percent, compared with 72-percent appreciation in average prices.&amp;rdquo; This paper also includes an interesting discussion of the effects of housing and permitting on housing cost.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:6&#34;&gt;&lt;a href=&#34;https://scholar.google.com/scholar_case?case=4168218225591685135&amp;amp;q=292+u.s.+371&amp;amp;hl=en&amp;amp;as_sdt=80000002&#34;&gt; Helvering v. Independent Life Ins. Co., 292 U.S. 371, 378-79 (1934)&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:6&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:7&#34;&gt;&lt;a href=&#34;http://supreme.justia.com/us/252/189/index.html&#34;&gt;Eisner v Macomber, 252 U.S. 189&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:7&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:9&#34;&gt;&lt;a href=&#34;https://medium.com/by-the-bay/exempting-suburbia-13e339f4e37a)&#34;&gt;https://medium.com/by-the-bay/exempting-suburbia-13e339f4e37a)&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My take on the Monty-Hall Problem</title>
      <link>https://lolney.github.io/posts/monty-hall/</link>
      <pubDate>Sun, 18 Mar 2018 02:01:38 -0800</pubDate>
      
      <guid>https://lolney.github.io/posts/monty-hall/</guid>
      <description>&lt;p&gt;Monty-Hall is a simple problem that&amp;rsquo;s attracted a disproportionate amount of controversy. It&amp;rsquo;s originally formulated as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Suppose you&amp;rsquo;re on a game show, and you&amp;rsquo;re given the choice of three doors: Behind one door is a car; behind the others, goats. You pick a door, say No. 1, and the host, who knows what&amp;rsquo;s behind the doors, opens another door, say No. 3, which has a goat. He then says to you, &amp;ldquo;Do you want to pick door No. 2?&amp;rdquo; Is it to your advantage to switch your choice?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The question is posed in a way that makes you think the answer is no, since you have a &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; chance of winning whether you switch or not.&lt;/p&gt;

&lt;p&gt;The key to thinking about it properly, which isn&amp;rsquo;t really clear in the original formulation, is that the host won&amp;rsquo;t open door 2 or 3 if he knows the car is behind it, but chooses uniformly at random between 2 and 3 if the car is in door 1. Working out the probabilities, it&amp;rsquo;s then clear that switching to door 2 will give you a &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; chance of winning. Different interpretations may lead to different solutions.&lt;/p&gt;

&lt;p&gt;In the equations below, $\Pr(C_i)$ denotes the probability that the car is in door $i$, while $\Pr(D_i)$ denotes the probability that the host opens door $i$. Here&amp;rsquo;s the correct interpretation:
&lt;div&gt;
$$
P( C_1 \mid D_3)
= \frac{P(C_2 \wedge D_3)}{P(C_1 \wedge D_3) + P(C_2 \wedge D_3)}
= \frac{\frac{1}{3}}{\frac{1}{6} + \frac{1}{3}}
= \frac{2}{3}
$$
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;By contrast, if $P( C_1 \mid D_1) = \frac{1}{3}$ &amp;ndash; that is, the host always chooses door 3 when the car is in door 1, chooses door 3 when the car is in door 2, and chooses door 2 if the car is in door 3 &amp;ndash; the probability of winning is now &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; whether you switch or not.
&lt;div&gt;
$$
P( C_1 \mid D_3)
= \frac{\frac{1}{3}}{\frac{1}{3} + \frac{1}{3}}
= \frac{1}{2}
$$
&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Now consider if the host chooses between doors 2 and 3 uniformly at random. The probability of winning outright is now &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt; - the car is in the host&amp;rsquo;s chosen door, so you can just choose that one. Then $P(C_2 \mid D_3 \wedge \neg C_3)$ is &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; &amp;ndash; either it&amp;rsquo;s in door 1 and he chooses the wrong door or in door 2 and he chooses the wrong door, making the total prob. of winning still &lt;sup&gt;2&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;.&lt;/p&gt;

&lt;p&gt;$$
P(Winning) = P(picks correctly) + P(picks incorrectly \wedge guess correctly)
$$
$$
= P( C_2 \wedge D_2) + P( C_3 \wedge D_3) + P(C_1 \wedge D_3 \wedge \neg C_3) + P(C_1 \wedge D_2 \wedge \neg C_2)
$$
$$
= \frac{1}{6} + \frac{1}{6} + \frac{1}{6} + \frac{1}{6} = \frac{2}{3}
$$&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Ethereum Whitepaper</title>
      <link>https://lolney.github.io/posts/ethereum-whitepaper/</link>
      <pubDate>Sat, 17 Mar 2018 02:01:38 -0800</pubDate>
      
      <guid>https://lolney.github.io/posts/ethereum-whitepaper/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/ethereum/wiki/wiki/White-Paper#ethereum&#34;&gt;https://github.com/ethereum/wiki/wiki/White-Paper#ethereum&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;People have come up with some creative purposes for the bitcoin blockchain, like metacoins, that weren&amp;rsquo;t anticipated in the original spec. Generally speaking, though, these applications don&amp;rsquo;t have the same security guarantees as bitcoin itself, and can&amp;rsquo;t leverage the network for anything more than storage. Ethereum expands on that idea, introducing a virtual machine and programming language with code that can be attached to every transaction. The result is that anyone can pay a fee to do useful work &amp;ndash; or store data &amp;ndash; that&amp;rsquo;s replicated on any node that keeps the full state of Ethereum&amp;rsquo;s network.&lt;/p&gt;

&lt;p&gt;The code has access to its own internal state and lives within the Ethereum execution environment. It&amp;rsquo;s run by any full node in the network that receives that transaction  - and it&amp;rsquo;s paid for by the sender, who&amp;rsquo;s required to attach payment in the form of &amp;ldquo;gas&amp;rdquo; (which is tied to the main currency, Ether). Each transaction has a fixed cost plus the variable cost of running the attached code.&lt;/p&gt;

&lt;p&gt;Contracts can themselves send communications to other clients, called &amp;ldquo;messages.&amp;rdquo; This creates a distinction between externally-owned accounts (which send transactions signed with their private key) and contract accounts. These messages are similar to transactions, except that they consume gas endowed to them by the transaction that originally created the contract - the contract uses that budget to send its own messages.&lt;/p&gt;

&lt;p&gt;Ethereum code runs on a fairly simple virtual machine with a stack-based execution model and a specially-created bytecode, whose instructions can affect the stack or the contract&amp;rsquo;s storage.&lt;/p&gt;

&lt;p&gt;Ethereum full nodes must keep the state of the network and update it with each transaction. Only the node that successfully mines the next block, however, collects the fees for the gas that gets consumed. Who end up mining the block is a different question - originally it was based on a competitive proof-of-work system,  but it will move soon to proof-of-stake (a topic for another time).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Smart Contract Uses:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Smart contracts enable all sorts of decentralized applications, and can also create effectively centralized services (like banks) with the advantages of distributed trust (provided by blockchain verification). Eg, you can create a bank contract with a central storage vault for all accounts that resides in the contract&amp;rsquo;s storage, distrubuted over all validating nodes.&lt;/p&gt;

&lt;p&gt;They can also be used to provide payment, in tokens, for work done in a distributed process, like computing or file storage. Because Ethereum stores all state information in the latest block, client nodes don&amp;rsquo;t have to process the entire blockchain or rely on trusted nodes to see the current state of their token system.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Readings</title>
      <link>https://lolney.github.io/readings/</link>
      <pubDate>Sun, 04 Mar 2018 02:20:05 -0800</pubDate>
      
      <guid>https://lolney.github.io/readings/</guid>
      <description>

&lt;p&gt;Short summaries of stuff I&amp;rsquo;ve read (mostly technical blogs or papers) that don&amp;rsquo;t deserve their own post:
&lt;a href=&#34;http://sriku.org/blog/2012/04/14/creating-dsls-in-javascript-using-j-expressions/&#34;&gt;http://sriku.org/blog/2012/04/14/creating-dsls-in-javascript-using-j-expressions/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;ipfs-interplanetary-file-system-proposal-paper-https-github-com-ipfs-ipfs-blob-master-papers-ipfs-cap2pfs-ipfs-p2p-file-system-pdf-raw-true&#34;&gt;&lt;a href=&#34;https://github.com/ipfs/ipfs/blob/master/papers/ipfs-cap2pfs/ipfs-p2p-file-system.pdf?raw=true&#34;&gt;IPFS (Interplanetary File System) Proposal Paper&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&#34;3-27-208&#34;&gt;3/27/208&lt;/h4&gt;

&lt;p&gt;IPFS is a distributed file system. It combines ideas from Kademlia, Bittorrent, Git,and Self-Certified Filesystems, taking respectively 1) routing and node identity, 2) block exchange, 3) Merkle tree-based verification and versioning, and 4) self-certification - addresses derived from public keys.&lt;/p&gt;

&lt;p&gt;The result is something like a DHT that stores Git objects and uses the Bittorrent protocol for distribution. The certificate system, which does not rely on a trusted 3rd party to map addresses to public keys, is another major feature, allowing public-key encryption and ensuring that a malicious node can&amp;rsquo;t impersonate a node that has already established trust.&lt;/p&gt;

&lt;p&gt;The block exchange protocol, called BitSwap, is a modified version of Bittorrent&amp;rsquo;s. Bittorrent provides incentives for seeding - the standard seeding strategy is to prioritize seeding to the n peers that are themselves the best seeders. BitSwap is similar, but the choice of which peers to seed to is probabilistic, depending on that peer&amp;rsquo;s ratio of sent:received objects. Since this probability is based on &lt;em&gt;lifetime ratios&lt;/em&gt;, a peer can stop uploading for a short time and not have its download rates affected much.&lt;/p&gt;

&lt;p&gt;Bittorrent also encourages the sharing of rare pieces by making sure that rare pieces are requested first. If this is a demand-side incentive - demand is increased for rare pieces - BitSwap&amp;rsquo;s solution is supply-side - peers are encouraged to seek objects that their peers also want. This allows a peer to contribute even if it currently does not want any objects.&lt;/p&gt;

&lt;p&gt;The file system itself is implemented as a Merkle DAG, very similar to Git&amp;rsquo;s. Objects have links to other objects, represented as their hashes. &lt;code&gt;Tree&lt;/code&gt; objects represent directories, &lt;code&gt;blob&lt;/code&gt;s data, and &lt;code&gt;commit&lt;/code&gt;s represent snapshots of a collection of objects in some state. IPFS, unlike git, also has &lt;code&gt;list&lt;/code&gt;s, which can contain blobs or other lists. Like Git, objects are deduplicated because they are addressed by their hashes. They are also immutable and permanent: once mutated, an object&amp;rsquo;s hash changes, and there is no command in the protocol to delete the previous version.&lt;/p&gt;

&lt;h3 id=&#34;google-project-zero-dns-rebinding-attacks-https-bugs-chromium-org-p-project-zero-issues-list-can-1-q-dns-rebinding-colspec-id-type-status-priority-milestone-owner-summary-cells-ids&#34;&gt;&lt;a href=&#34;https://bugs.chromium.org/p/project-zero/issues/list?can=1&amp;amp;q=dns+rebinding&amp;amp;colspec=ID+Type+Status+Priority+Milestone+Owner+Summary&amp;amp;cells=ids&#34;&gt;Google Project Zero: DNS Rebinding Attacks&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&#34;3-23-2018&#34;&gt;3/23/2018&lt;/h4&gt;

&lt;p&gt;These attacks involve using DNS rebinding to allow a website to send requests to HTTP servers on a user&amp;rsquo;s machine. The targets include RPC servers included with uTorrent and with Blizzard Updater.&lt;/p&gt;

&lt;p&gt;DNS rebinding is meant to get around the same origin policy. The scheme is: setup a domain and a DNS server with a short TTL. Once that&amp;rsquo;s expired, serve a script that makes a request to the origin domain - but when the browser makes a DNS request, respond with localhost instead. That way, the request gets routed to the target instead.&lt;/p&gt;

&lt;p&gt;Each vulnerable app also failed to provide authentication that could prevent the attack. The Blizzard Updater included an auth token with each response, presumably setting Access-Control-Allow-Credentials to prevent bad actors from reading it - but DNS rebinding circumvented this.&lt;/p&gt;

&lt;h3 id=&#34;async-in-rust-https-aturon-github-io-apr&#34;&gt;&lt;a href=&#34;https://aturon.github.io/apr/&#34;&gt;Async in Rust&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&#34;3-22-2018&#34;&gt;3/22/2018&lt;/h4&gt;

&lt;p&gt;Asynchronous programming constructs allow you to reason about asynchronous operations without explicitly working with threads - the asynchronous library handles that itself, preventing unnecessary thread spawning. In Rust, these constructs are &amp;lsquo;tasks.&amp;rsquo; When you run a task, instead of blocking, it returns control to the executor thread. The task runs until it would block, then returns &lt;code&gt;Async::Pending&lt;/code&gt;. You also provide it a &lt;code&gt;Waker&lt;/code&gt; so that it can wake itself up again.&lt;/p&gt;

&lt;p&gt;An executor works by running each of the tasks until they block, and then &lt;code&gt;park&lt;/code&gt;ing. A &lt;code&gt;Waker&lt;/code&gt; contains a link back to the executor and inserts the task in the executor&amp;rsquo;s ready set before &lt;code&gt;unpark&lt;/code&gt;ing it.&lt;/p&gt;

&lt;p&gt;Futures are tasks that can be chained. They must implement a type Item that is the result of the computation, a type Error, and a poll method that returns &lt;code&gt;Async::WillWake&lt;/code&gt; or &lt;code&gt;Async::Ready(data: Item)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Futures are designed to be state machines: eg, one that alterates between the states &lt;code&gt;Reading&lt;/code&gt; and &lt;code&gt;Writing&lt;/code&gt;, returning Async::NotReady when it can&amp;rsquo;t proceed.&lt;/p&gt;

&lt;h3 id=&#34;bind-before-connect-https-idea-popcount-org-2014-04-03-bind-before-connect&#34;&gt;&lt;a href=&#34;https://idea.popcount.org/2014-04-03-bind-before-connect/&#34;&gt;Bind before connect&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&#34;3-20-2018&#34;&gt;3/20/2018&lt;/h4&gt;

&lt;p&gt;If you create a socket and call &lt;code&gt;connect(dst, port)&lt;/code&gt; on it, or first call &lt;code&gt;bind(src, port)&lt;/code&gt; with port 0, the kernel will allocate from the pool of up to 64k available ports. However, with with &lt;code&gt;SO_REUSEPORT&lt;/code&gt;, you can also share ports to create an effectively unlimited number of connections - as long as the destination address is different for each connection sharing the same port. To have multiple connections to the same IP/Port pair, you can use different source IP addresses instead.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;SO_REUSEADDR&lt;/code&gt; behaves slightly differently than &lt;code&gt;SO_REUSEPORT&lt;/code&gt;, allowing reuse of addresses in the cooldown period after a process releases a socket, plus allowing binding of wildcard addresses (&lt;code&gt;0.0.0.0&lt;/code&gt;) and normal addresses to the same port.&lt;/p&gt;

&lt;p&gt;There are various implementation concerns (ie, &lt;code&gt;bind&lt;/code&gt; is fine, but after &lt;code&gt;connect&lt;/code&gt; one of the reuse rules is broken) that the linked post discusses.&lt;/p&gt;

&lt;h3 id=&#34;pitfalls-of-oo-design-https-medium-com-cscalfani-goodbye-object-oriented-programming-a59cda4c0e53&#34;&gt;&lt;a href=&#34;https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53&#34;&gt;Pitfalls of OO Design&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&#34;3-15-2018&#34;&gt;3/15/2018&lt;/h4&gt;

&lt;p&gt;An overview for the reasons that more recent languages (Rust, Go) have avoided the full-on object-orientedness of Java, C#, et. al. Traits and interfaces allow for polymorphism while avoiding the problems of inheritance - they&amp;rsquo;re not hierarchical, so they avoid issues like the diamond problem that result when implementing new objects that don&amp;rsquo;t fit easily into the existing hierarchy. Non-hierarchical structs also avoid the bloat of carrying around unnecessary parent fields.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://lolney.github.io/projects/</link>
      <pubDate>Sun, 04 Mar 2018 02:10:17 -0800</pubDate>
      
      <guid>https://lolney.github.io/projects/</guid>
      <description>

&lt;p&gt;Some of the projects I&amp;rsquo;ve worked on in my spare time, in roughly descending order of seriousness.&lt;/p&gt;

&lt;h3 id=&#34;rust-bittorrent-client-https-github-com-lolney-rust-bittorrent-client&#34;&gt;&lt;a href=&#34;https://github.com/lolney/rust-bittorrent-client&#34;&gt;Rust Bittorrent Client&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;An implementation of the bittorent spec in Rust &amp;ndash; including a parser for bencoded objects &amp;ndash; and a client with a UI built with ncurses. Writeup on some of the implementation challenges coming.&lt;/p&gt;

&lt;h3 id=&#34;plantary-surfaces-https-github-com-lolney-planetary-surface-visualizer&#34;&gt;&lt;a href=&#34;https://github.com/lolney/Planetary-Surface-Visualizer&#34;&gt;Plantary Surfaces&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Using a crude WebGL engine, shows what the solar cycle looks like at various points of the year on a planet with adjustable orbital parameters. E.g., on a planet with an orbital inclination of 90 degrees - tilted on its side - everywhere on the planet but the equator experiences polar night for some part of the year.&lt;/p&gt;

&lt;h3 id=&#34;world-climate-data-https-github-com-lolney-world-climate-data&#34;&gt;&lt;a href=&#34;https://github.com/lolney/World-Climate-Data&#34;&gt;World Climate Data&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Maps monthly average high/low temperatures, based on interpolated and altitude-adjusted USGS station data.&lt;/p&gt;

&lt;h3 id=&#34;zosterops-games-package-https-github-com-lolney-unityproject&#34;&gt;&lt;a href=&#34;https://github.com/lolney/UnityProject&#34;&gt;Zosterops Games Package&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Some silly games made in Unity, themed around a type of birds called white-eyes. The first one: navigate to the top of Mt. Kilamanjaro while freeing the white-eyes trapped in cages before a wandering cat gets to them. The second: a kind of tower defence game where you place obstacles to hinder the enemy (cats) while boosting your friends (white-eyes).&lt;/p&gt;

&lt;h2 id=&#34;in-early-stages&#34;&gt;In early stages:&lt;/h2&gt;

&lt;h3 id=&#34;scripting-rpg-https-github-com-lolney-scripting-rpg&#34;&gt;&lt;a href=&#34;https://github.com/lolney/scripting-rpg&#34;&gt;Scripting RPG&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;An attempt to make a sort of MMORPG where your character is controlled entirely with scripts.&lt;/p&gt;

&lt;h3 id=&#34;twitter-profiles-https-github-com-lolney-twitter-profiles&#34;&gt;&lt;a href=&#34;https://github.com/lolney/twitter-profiles&#34;&gt;Twitter Profiles&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Topic analysis of Twitter accounts. Catagorizes interests based on a hierarchy derived from the Wikipedia category graph.&lt;/p&gt;

&lt;h2 id=&#34;other-minor-or-school-projects&#34;&gt;Other Minor or School Projects:&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lolney/RecipeTransformations&#34;&gt;Recipe Maker&lt;/a&gt; *
&lt;a href=&#34;https://github.com/YiMysty/345-Project/tree/master/src/kademlia&#34;&gt;Kademlia DHT implementation&lt;/a&gt; *
&lt;a href=&#34;https://github.com/eecs394-spr15/NUHacks&#34;&gt;A Yik Yak-like hybrid mobile app&lt;/a&gt; *
&lt;a href=&#34;https://github.com/eecs394-spr15/MuseumTour&#34;&gt;Mobile app for beacon-guided museum tours&lt;/a&gt; *
&lt;a href=&#34;https://github.com/lolney/Building-Age-Map&#34;&gt;San Francisco Building Ages&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why this site?</title>
      <link>https://lolney.github.io/why/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lolney.github.io/why/</guid>
      <description>&lt;p&gt;After opening &lt;a href=&#34;https://zettelkasten.de/posts/collectors-fallacy/&#34;&gt;this post&lt;/a&gt; from Hacker News on the collector&amp;rsquo;s falacy, then passing my eyes over the dozens of other tabs I had open in a half-read state, I decided I needed something to hold me accountable for getting pulled into distractions I can&amp;rsquo;t finish. If it helped me retain what I just read, that&amp;rsquo;d be nice too. So, I created this site. I hope to include my summaries here of any readings I find on the netz with content worth saving (starting here).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>