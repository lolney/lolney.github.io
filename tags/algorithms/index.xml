<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Algorithms on Luke Olney</title>
    <link>https://lolney.github.io/tags/algorithms/</link>
    <description>Recent content in Algorithms on Luke Olney</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Apr 2018 16:25:24 -0700</lastBuildDate>
    
	<atom:link href="https://lolney.github.io/tags/algorithms/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Skip List</title>
      <link>https://lolney.github.io/readings/skip-list/</link>
      <pubDate>Fri, 06 Apr 2018 16:25:24 -0700</pubDate>
      
      <guid>https://lolney.github.io/readings/skip-list/</guid>
      <description>The skip list is an alternative to balanced search trees, especially suited for distributed applications. MemSQL is probably the primary adopter, using skip lists as its primary index structure, but they&amp;rsquo;re also used in Redis to implement ordered sets.
This image from the paper shows what the data structure looks like. A node contains k pointers, with the ith pointer pointing to the next node of level i: The paper defends the claims that 1) concurrency guarantees are easier to implement for skip lists than for balanced trees, requiring only write locks, and 2) the data structure is very unlikely to become significantly unbalanced.</description>
    </item>
    
  </channel>
</rss>