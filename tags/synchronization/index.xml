<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Synchronization on Luke Olney</title>
    <link>https://lukeolney.me/tags/synchronization/</link>
    <description>Recent content in Synchronization on Luke Olney</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Apr 2018 20:20:48 -0700</lastBuildDate>
    
	<atom:link href="https://lukeolney.me/tags/synchronization/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Everything You Always Wanted to Know About Synchronization but Were Afraid to Ask</title>
      <link>https://lukeolney.me/readings/synchronization/</link>
      <pubDate>Thu, 19 Apr 2018 20:20:48 -0700</pubDate>
      
      <guid>https://lukeolney.me/readings/synchronization/</guid>
      <description>This paper is an overview of synchronization methods across the hardware stack, with an analysis that attributes high-level performance differences to low-level hardware constraints.
Among the key takeaways:
Latency of atomic operations: There is a heavy penalty for cross-socket sharing - ie, passing data between cores (or hyperthreads). This outweighs other sources of latency by far.
Locking vs message passing: Message passing is better when data has high contention, locking with low contention.</description>
    </item>
    
  </channel>
</rss>